{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Semana 13.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SofiaGMiranda/AED-20212/blob/main/ASIGNACION%20SEMANA%2013\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5kfHpIGOKmpm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d90bc4f-97d1-4ab2-ebc8-0ea9817f69f6"
      },
      "source": [
        "%%writefile As.cpp\n",
        "#include <iostream>\n",
        "#include <string>\n",
        "#include <fstream>\n",
        "#include <cstdlib>\n",
        "#include <functional>\n",
        " using namespace std;\n",
        "\n",
        "template <class T>\n",
        "class Nodo {\n",
        "public:\n",
        "\tT elemento;\n",
        "\tNodo* izq;\n",
        "\tNodo* der;\n",
        "\tNodo<T>* padre;\n",
        "  Nodo(T elemento,Nodo<T>* padre){\n",
        "      this->elemento=elemento;\n",
        "      izq=der=nullptr;\n",
        "\t\t\tthis->padre=padre;\n",
        "\n",
        "  }\n",
        "  Nodo(){ }\n",
        "\n",
        "};\n",
        "\n",
        "template <class T>\n",
        "class ArbolB {\n",
        "\tNodo<T>* raiz;\n",
        "\n",
        "\t\n",
        "private:\n",
        "\n",
        " \n",
        "\n",
        "\tbool _insertar(Nodo<T>*& nodo, T e,Nodo<T>* padre, function<bool (T,T)>compare, function<bool (T,T)>compare2 ) {\n",
        "\t\tif (nodo == nullptr) {\n",
        "\t\t\tnodo = new Nodo<T>();\n",
        "\t\t\tnodo->elemento = e;\n",
        "\t\t\tnodo->padre=padre;\n",
        "\t\t}\n",
        "\t\telse if (compare(e,nodo->elemento)) {\n",
        "\t\t\treturn _insertar(nodo->izq, e,nodo,compare,compare2);\n",
        "\t\t}\n",
        "\t\telse if (compare2(e,nodo->elemento)) {\n",
        "\t\t\treturn _insertar(nodo->der, e,nodo,compare,compare2);\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tvoid _enOrden(Nodo<T>* nodo,function<void(T)> printer) {\n",
        "\t\tif (nodo == nullptr) return;\n",
        "\t\t_enOrden(nodo->izq,printer);\n",
        "\t\t\n",
        "\t\tprinter(nodo->elemento);\n",
        "\t\t_enOrden(nodo->der,printer);\n",
        "\t}\n",
        "\n",
        "\t\n",
        "\tvoid _preOrden(Nodo<T>* nodo,function<void(T)> printer) {\n",
        "\t\tif (nodo == nullptr) return;\n",
        "\t\t\n",
        "\t\tprinter(nodo->elemento);\n",
        "\t\t_preOrden(nodo->izq,printer);\t\n",
        "\t\t_preOrden(nodo->der,printer);\n",
        "\t}\n",
        "\n",
        "\tvoid _postOrden(Nodo<T>* nodo,function<void(T)> printer) {\n",
        "\t\tif (nodo == nullptr) return;\n",
        "\t\t_postOrden(nodo->izq,printer);\n",
        "\t\t_postOrden(nodo->der,printer);\n",
        "\t\t\n",
        "\t\tprinter(nodo->elemento);\n",
        "\t\t\n",
        "\t}\n",
        "\t\n",
        "\tbool _vacio() {\n",
        "\t\treturn raiz == nullptr;\n",
        "\t}\n",
        "\n",
        "\tint _cantidad(Nodo<T>* nodo) {\n",
        "\t\t//La cantidad de nodos del árbol es:\n",
        "\t\t//\t0 si es vacío\n",
        "\t\t//\t1 + la cantidad de nodos por la izquierda + la cantidad de nodos por la derecha\n",
        "\t\tif (nodo==nullptr)\n",
        "\t\t\treturn 0;\n",
        "\t\telse\n",
        "\t\t{\n",
        "\t\t\tint ci, cd;\n",
        "\t\t\tci = _cantidad(nodo->izq);\n",
        "\t\t\tcd = _cantidad(nodo->der);\n",
        "\t\t\treturn 1 + ci + cd;\n",
        "\t\t}\n",
        "\n",
        "\t}\n",
        "\n",
        "\n",
        "\n",
        "\tint altura(Nodo<T>* nodo){\n",
        "\t\t\tint alturar=0;\n",
        "\t\t\tint alturaraiz=0;\n",
        "\n",
        "\t\t\tif(nodo==nullptr){\n",
        "\t\t\t\t\t\n",
        "\n",
        "\t\t\t}else{\n",
        "\t\t\t\t\talturaraiz=1;\n",
        "\t\t\t\t\tint alturaizq=altura(nodo->izq);\t\t\n",
        "\t\t\t\t\tint alturader=altura(nodo->der);\n",
        "\t\t\t\t\tif(alturaizq>alturader){\n",
        "\t\t\t\t\t\t\talturar=alturaizq+alturaraiz;\n",
        "\t\t\t\t\t}else{\n",
        "\t\t\t\t\t\t\talturar=alturader+alturaraiz;\n",
        "\t\t\t\t\t}\n",
        "\t\t\t}\n",
        "\n",
        "\n",
        "\t\treturn alturar;\n",
        "\t}\n",
        "\n",
        "\n",
        "void reemplazar(Nodo<T>* nodo,Nodo<T>* nodo2,function<bool(T,T)> compare){\n",
        "\t\tif (nodo->padre) {\n",
        "     \n",
        "        if (compare(nodo->elemento,nodo->padre->izq->elemento)) {\n",
        "            nodo->padre->izq = nodo2;\n",
        "        }\n",
        "        else if (compare(nodo->elemento,nodo->padre->der->elemento)) {\n",
        "            nodo->padre->der = nodo2;\n",
        "        }\n",
        "    }\n",
        "    if (nodo2) {\n",
        "        // Procedemos a asignarle su nuevo padre\n",
        "        nodo2->padre = nodo->padre;\n",
        "    }\n",
        "\n",
        "}\n",
        "\n",
        "void destruirNodo(Nodo<T>* nodo) {\n",
        "    nodo->izq = nullptr;\n",
        "    nodo->der = nullptr;\n",
        "    delete nodo;\n",
        "}\n",
        "\n",
        "\tvoid eliminar(Nodo<T>* nodo,T erase,function<bool(T,T)>compare,function<bool(T,T)>compare2,function<bool(T,T)>compare3){\n",
        "\t\t\t\n",
        "\t\t\tif(nodo==nullptr){\n",
        "\t\t\t\t\treturn;\n",
        "\t\t\t}else if(compare(erase,nodo->elemento)){\n",
        "\t\t\t\t\teliminar(nodo->izq,erase,compare,compare2,compare3);\n",
        "\t\t\t}else if(compare2(erase,nodo->elemento)){//compare 3333\n",
        "\t\t\t\t\teliminar(nodo->der,erase,compare,compare2,compare3);\n",
        "\t\t\t}else{\n",
        "\t\t\t\t\t\n",
        "\t\t\t\t\teliminarNodo(nodo,compare3);//compare 4444\n",
        "\t\t\t}\n",
        "\t}\n",
        "\n",
        "\tNodo<T> *min(Nodo<T>* nodo){\n",
        "\t\t\tif(nodo==nullptr){\n",
        "\t\t\t\t\treturn nullptr;\n",
        "\t\t\t}\n",
        "\t\t\tif(nodo->izq){\n",
        "\t\t\t\t\treturn min(nodo->izq);\n",
        "\t\t\t}else{\n",
        "\t\t\t\t\treturn nodo;\n",
        "\t\t\t}\n",
        "\t}\n",
        "\n",
        "\tvoid eliminarNodo(Nodo<T>* nodoerase,function<bool(T,T)> compare3){\n",
        "\t\t\tif(nodoerase->izq && nodoerase->der){\n",
        "\t\t\t\t\tNodo<T>*menor=min(nodoerase->der);\n",
        "\t\t\t\t\tnodoerase->elemento=menor->elemento;\n",
        "\t\t\t\t\teliminarNodo(menor,compare3);\n",
        "\n",
        "\t\t\t}else if (nodoerase->izq) {\n",
        "\t\t\n",
        "        reemplazar(nodoerase, nodoerase->izq,compare3);\n",
        "        destruirNodo(nodoerase);\n",
        "    }\n",
        "    else if (nodoerase->der) {\n",
        "\t\t\t\t \n",
        "        reemplazar(nodoerase, nodoerase->der,compare3);\n",
        "        destruirNodo(nodoerase);\n",
        "    }\n",
        "    else { // No tiene hijos\n",
        "\t\t        \n",
        "        reemplazar(nodoerase, nullptr,compare3);\n",
        "        destruirNodo(nodoerase);\n",
        "    }\n",
        "\t}\n",
        "\n",
        "public:\n",
        "\tArbolB() {\n",
        "\t\t\n",
        "\t\traiz = nullptr;\n",
        "\t\n",
        "\t\n",
        "\t}\n",
        "\n",
        "\n",
        "\tbool insertar(T e,function<bool(T,T)>compare, function<bool(T,T)>compare2) {\n",
        "\t\treturn _insertar(raiz, e,nullptr,compare,compare2);\n",
        "\t}\n",
        "\tvoid enOrden(function<void(T)> printer) {\n",
        "\t\t_enOrden(raiz,printer);\n",
        "  }\n",
        "\n",
        "\tvoid preOrden(function<void(T)> printer) {\n",
        "\t\t_preOrden(raiz,printer);\n",
        "  }\n",
        "\n",
        "\tvoid postOrden(function<void(T)> printer) {\n",
        "\t\t_postOrden(raiz,printer);\n",
        "  }\n",
        "\n",
        "\tvoid eliminar(T erase,function<bool(T,T)>compare, function<bool(T,T)>compare3,function<bool(T,T)>compare4 ){\n",
        "\t\n",
        "\t\t\teliminar(raiz,erase,compare,compare3,compare4);\n",
        "\t}\n",
        "\t\n",
        "\n",
        "\tint cantidad() {\n",
        "\t\treturn _cantidad(raiz);\n",
        "\t}\n",
        "\n",
        "\tint altura(){\n",
        "\t\treturn altura(raiz);\n",
        "\t}\n",
        "\n",
        "\n",
        "};\n",
        "\n",
        "\n",
        "class Register {\n",
        "\tstring apellido;\n",
        "\tstring nombre;\n",
        "\tshort edad;\n",
        "\tbool fumador;\n",
        "\n",
        "public:\n",
        "\tRegister(string nombre=\" \", string apellido=\" \", short edad=0, bool fumador=false) {\n",
        "\t\tthis->apellido = apellido;\n",
        "\t\tthis->nombre = nombre;\n",
        "\t\tthis->edad = edad;\n",
        "\t\tthis->fumador = fumador;\n",
        "\t}\n",
        "\tfriend ostream& operator<<(ostream& os, const Register& r) {\n",
        "\t\tos << r.nombre << \" \" << r.apellido << \" \" << r.edad << \" \" << r.fumador << endl;\n",
        "\t\treturn os;\n",
        "\t}\n",
        "\tbool operator<(const Register& r) {\n",
        "\t\treturn this->edad< r.edad;\n",
        "\t}\n",
        "\tbool operator>=(const Register& r) {\n",
        "\t\treturn this->edad > r.edad;\n",
        "\t}\n",
        "  bool operator>(const Register& r) {\n",
        "\t\treturn this->edad > r.edad;\n",
        "\t}\n",
        "\n",
        "\tbool operator==(const Register& r) {\n",
        "\t\treturn this->edad == r.edad;\n",
        "\t}\n",
        "\n",
        "};\n",
        "\n",
        "\n",
        "class Dataset {\n",
        "\tArbolB<Register> tree;\n",
        "\t\n",
        "\n",
        "public:\n",
        "\tDataset() {\n",
        "\t\n",
        "\t}\n",
        "\tvoid readTSV(function<bool(Register,Register)>compare,function<bool(Register,Register)>compare2,string name = \"\", bool header = true) {//campos separados por tab o espacios\n",
        "\t\tifstream file(name);\n",
        "\t\tstring reg, nombre, apellido, t_edad, t_fumador;\n",
        "\t\tshort edad;\n",
        "\t\tbool fumador;\n",
        "\t\tif (header)\n",
        "\t\t\tgetline(file, reg);\n",
        "\t\twhile (file >> nombre >> apellido >> t_edad >> t_fumador) {\n",
        "\t\t\tedad = stoi(t_edad);\n",
        "\t\t\tfumador = t_fumador[0] == 'Y';\n",
        "\t\t\ttree.insertar(Register(nombre, apellido, edad, fumador),compare, compare2);\n",
        "\t\t}\n",
        "\t}\n",
        "\tvoid readCSV(string name = \"\", bool header = true) {//campos separados por comas\n",
        "\t\tifstream file(name);\n",
        "\t\tstring reg, nombre, apellido, t_edad, t_fumador, dummy;\n",
        "\t\tshort edad;\n",
        "\t\tbool fumador;\n",
        "\t\tif (header)\n",
        "\t\t\tgetline(file, reg);\n",
        "\t\twhile (file >> nombre >> dummy >> apellido >> dummy >> t_edad >> dummy >> t_fumador) {\n",
        "\t\t\tedad = stoi(t_edad);\n",
        "\t\t\tfumador = t_fumador[0] == 'Y';\n",
        "\t\t\t//tree.insert(rand() % 1000, Register(nombre, apellido, edad, fumador));\n",
        "\t\t}\n",
        "\t}\n",
        "\t\n",
        "\tvoid print(function<void(Register)> printer) {\n",
        "\t\ttree.enOrden(printer);\n",
        "\t\t\n",
        "\t\tcout<<\"Altura: \"<<tree.altura()<<\"\\n\";\n",
        "\t\tcout<<\"Nivel: \"<<tree.altura()-1<<endl;\n",
        "    cout<<\"Cantidad: \"<<tree.cantidad();\n",
        "\t}\n",
        "\n",
        "\t\t\n",
        "\n",
        "\tvoid Erase(Register erase,function<bool(Register,Register)>compare, function<bool(Register,Register)>compare3,function<bool(Register,Register)>compare4){\n",
        "\t\t\ttree.eliminar(erase,compare,compare3,compare4);\n",
        "\t\t\t\n",
        "\t}\n",
        "\n",
        "};\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "int main(){\n",
        "   /* ArbolB<Register*> tree;\n",
        "   tree.insertar(new Register(\"Juan\",\"Perez\",28,0));\n",
        "    tree.insertar(new Register(\"Carlos\",\"Perez\",29,0));\n",
        "    tree.insertar(new Register(\"Tito\",\"Perez\",17,1));\n",
        "    tree.postOrden();\n",
        "\t\ttree.altura();\n",
        "    cout<<\"\\n\"<<tree.cantidad();*/\n",
        "//Espacio de lambdas\n",
        "  auto compare=[](Register a, Register b)->bool{\treturn a<b;\t};\n",
        "\tauto compare2=[](Register a, Register b)->bool{\treturn a>=b;\t};\n",
        "\tauto compare3=[](Register a, Register b)->bool{\treturn a>b;\t};\n",
        "\tauto compare4=[](Register a, Register b)->bool{\treturn a==b;\t};\n",
        "\tauto printer=[](Register a){cout<<a;};\n",
        "\n",
        "\n",
        "Register erase=Register(\"Maria\",\"Carmela\",35,1);\n",
        "    Dataset ds;\n",
        "\t\tds.readTSV(compare, compare2,\"Registros.csv\");\n",
        "    ds.print(printer);\n",
        "\t\t\n",
        "\t\tds.Erase(erase,compare,compare3,compare4);\n",
        "\t\tcout<<endl;\n",
        "\n",
        "   ds.print(printer);\n",
        "\t\t\n",
        "\t\t\n",
        "\t\n",
        "\n",
        "    return 0;\n",
        "}"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting As.cpp\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mT6zBv-5Q_Ji",
        "outputId": "9119e980-853b-4885-94de-f57a912ea887"
      },
      "source": [
        "!g++ As.cpp && ./a.out"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jorge Cerdan 20 1\n",
            "Fidel Sanchez 21 0\n",
            "Frank Manzan 27 0\n",
            "Sofia Minchola 34 1\n",
            "Roberto Juarez 35 0\n",
            "Juanito Alcachofa 37 0\n",
            "Altura: 5\n",
            "Nivel: 4\n",
            "Cantidad: 6\n",
            "Jorge Cerdan 20 1\n",
            "Fidel Sanchez 21 0\n",
            "Frank Manzan 27 0\n",
            "Sofia Minchola 34 1\n",
            "Juanito Alcachofa 37 0\n",
            "Altura: 5\n",
            "Nivel: 4\n",
            "Cantidad: 5"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W0NjpLa_RBoA",
        "outputId": "dc5768ec-2036-4d6b-b523-407fcbc066dd"
      },
      "source": [
        "%%writefile Registros.csv\n",
        "Apellido nombre edad fumador\n",
        "\n",
        "Jorge Cerdan 20 Y\n",
        "Roberto Juarez 35 N\n",
        "Sofia Minchola 34 Y \n",
        "Fidel Sanchez 21 N\n",
        "Juanito Alcachofa 37 N\n",
        "Frank Manzan 27 N"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting Registros.csv\n"
          ]
        }
      ]
    }
  ]
}